export type LogFunction = (...args: any[]) => any;
interface ILogContext {
    [key: string]: any;
}
interface ILogConfig {
    context?: ILogContext;
    errorWriter?: LogFunction;
    format?: string;
    level?: LogLevel;
    logWriter?: LogFunction;
    name?: string;
    useISO8601?: boolean;
}
export declare enum LogFormat {
    JSON = "{ \"timestamp\": \"${TIMESTAMP}\", \"level\": \"${LEVEL}\", \"name\": \"${NAME}\", \"message\": \"${MESSAGE}\" }",
    JSON_NO_TIME = "{ \"level\": \"${LEVEL}\", \"name\": \"${NAME}\", \"message\": \"${MESSAGE}\" }",
    TEXT = "[${TIMESTAMP}] [${LEVEL}] [${NAME}] ${MESSAGE}",
    TEXT_NO_TIME = "[${LEVEL}] [${NAME}] ${MESSAGE}"
}
export declare enum LogLevel {
    OFF = 1,
    FATAL = 2,
    ERROR = 3,
    WARN = 4,
    INFO = 5,
    LOG = 5,
    DEBUG = 6,
    TRACE = 7,
    VERBOSE = 7,
    ALL = 8
}
export declare class Logger {
    static readonly Format: typeof LogFormat;
    static readonly Level: typeof LogLevel;
    static getLogger(config?: ILogConfig | string): Logger;
    static setErrorWriter(errorWriter: LogFunction): void;
    static setGlobalContext(context: ILogContext | string, value?: any): void;
    static setLogWriter(logWriter: LogFunction): void;
    private static _globalContext;
    private static _loggers;
    private static _logWriter;
    private static _errorWriter;
    private readonly _regexDoubleQuote;
    private readonly _regexNewLine;
    private readonly _regexReturn;
    private readonly _regexCtx;
    private readonly _regexEnv;
    private readonly _regexEscapedVar;
    private readonly _regexEscapedSitkaVar;
    private readonly _regexLevel;
    private readonly _regexMessage;
    private readonly _regexMessageQuoted;
    private readonly _regexTimestamp;
    private _context;
    private _format;
    private _level;
    private _name;
    private _logWriter;
    private _errorWriter;
    private _useISO8601;
    private constructor();
    debug(message: any, ...args: any[]): any;
    error(message: any, ...args: any[]): any;
    fatal(message: any, ...args: any[]): any;
    info(message: any, ...args: any[]): any;
    log(message: any, ...args: any[]): any;
    setContext(context: ILogContext | string, value?: any): void;
    trace(message: any, ...args: any[]): any;
    verbose(message: any, ...args: any[]): any;
    warn(message: any, ...args: any[]): any;
    private convertToString;
    private getEnvVariable;
    private write;
}
export {};
