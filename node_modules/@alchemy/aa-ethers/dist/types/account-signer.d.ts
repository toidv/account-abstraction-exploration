import { type AccountMiddlewareFn, type FeeDataMiddleware, type GasEstimatorMiddleware, type PaymasterAndDataMiddleware, type PublicErc4337Client } from "@alchemy/aa-core";
import { Signer } from "@ethersproject/abstract-signer";
import type { Deferrable } from "@ethersproject/properties";
import { type TransactionRequest, type TransactionResponse } from "@ethersproject/providers";
import { EthersProviderAdapter } from "./provider-adapter.js";
export declare class AccountSigner extends Signer {
    readonly provider: EthersProviderAdapter;
    private account?;
    sendUserOperation: (data: import("@alchemy/aa-core").BatchUserOperationCallData | import("@alchemy/aa-core").UserOperationCallData, overrides?: Partial<Pick<import("@alchemy/aa-core").UserOperationStruct, "maxFeePerGas" | "maxPriorityFeePerGas" | "paymasterAndData">> | undefined) => Promise<import("@alchemy/aa-core").SendUserOperationResult>;
    waitForUserOperationTransaction: (hash: `0x${string}`) => Promise<`0x${string}`>;
    constructor(provider: EthersProviderAdapter);
    getAddress(): Promise<string>;
    signMessage(message: string | Uint8Array): Promise<string>;
    withPaymasterMiddleware: (overrides: {
        dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;
        paymasterDataMiddleware?: PaymasterAndDataMiddleware;
    }) => this;
    withGasEstimator: (override: GasEstimatorMiddleware) => this;
    withFeeDataGetter: (override: FeeDataMiddleware) => this;
    withCustomMiddleware: (override: AccountMiddlewareFn) => this;
    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse>;
    signTransaction(_transaction: Deferrable<TransactionRequest>): Promise<string>;
    getPublicErc4337Client(): PublicErc4337Client;
    connect(provider: EthersProviderAdapter): AccountSigner;
}
//# sourceMappingURL=account-signer.d.ts.map