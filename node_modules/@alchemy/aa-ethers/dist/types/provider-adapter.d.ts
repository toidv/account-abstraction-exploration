import { BaseSmartContractAccount, SmartAccountProvider, type AccountMiddlewareFn, type Address, type FeeDataMiddleware, type GasEstimatorMiddleware, type HttpTransport, type PaymasterAndDataMiddleware, type PublicErc4337Client } from "@alchemy/aa-core";
import { JsonRpcProvider } from "@ethersproject/providers";
import { AccountSigner } from "./account-signer.js";
export type EthersProviderAdapterOpts = {
    rpcProvider: string | PublicErc4337Client<HttpTransport>;
    entryPointAddress: Address;
    chainId: number;
} | {
    accountProvider: SmartAccountProvider<HttpTransport>;
};
/** Lightweight Adapter for SmartAccountProvider to enable Signer Creation */
export declare class EthersProviderAdapter extends JsonRpcProvider {
    readonly accountProvider: SmartAccountProvider<HttpTransport>;
    constructor(opts: EthersProviderAdapterOpts);
    /**
     * Rewrites the send method to use the account provider's EIP-1193
     * compliant request method
     *
     * @param method - the RPC method to call
     * @param params - the params required by the RPC method
     * @returns the result of the RPC call
     */
    send(method: string, params: any[]): Promise<any>;
    /**
     * Connects the Provider to an Account and returns a Signer
     *
     * @param fn - a function that takes the account provider's rpcClient and returns a BaseSmartContractAccount
     * @returns an {@link AccountSigner} that can be used to sign and send user operations
     */
    connectToAccount(fn: (rpcClient: PublicErc4337Client) => BaseSmartContractAccount): AccountSigner;
    /**
     * @returns an {@link AccountSigner} using this as the underlying provider
     */
    getAccountSigner(): AccountSigner;
    withPaymasterMiddleware: (overrides: {
        dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;
        paymasterDataMiddleware?: PaymasterAndDataMiddleware;
    }) => this;
    withGasEstimator: (override: GasEstimatorMiddleware) => this;
    withFeeDataGetter: (override: FeeDataMiddleware) => this;
    withCustomMiddleware: (override: AccountMiddlewareFn) => this;
    getPublicErc4337Client(): PublicErc4337Client;
    /**
     * @param provider - the ethers JSON RPC provider to convert
     * @param entryPointAddress - the entrypoint address that will be used for UserOperations
     * @returns an instance of {@link EthersProviderAdapter}
     */
    static fromEthersProvider(provider: JsonRpcProvider, entryPointAddress: Address): EthersProviderAdapter;
}
//# sourceMappingURL=provider-adapter.d.ts.map