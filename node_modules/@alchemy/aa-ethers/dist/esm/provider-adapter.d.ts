import { BaseSmartContractAccount, SmartAccountProvider, type AccountMiddlewareFn, type Address, type FeeDataMiddleware, type GasEstimatorMiddleware, type HttpTransport, type PaymasterAndDataMiddleware, type PublicErc4337Client } from "@alchemy/aa-core";
import { JsonRpcProvider } from "@ethersproject/providers";
import { AccountSigner } from "./account-signer.js";
export type EthersProviderAdapterOpts = {
    rpcProvider: string | PublicErc4337Client<HttpTransport>;
    entryPointAddress: Address;
    chainId: number;
} | {
    accountProvider: SmartAccountProvider<HttpTransport>;
};
export declare class EthersProviderAdapter extends JsonRpcProvider {
    readonly accountProvider: SmartAccountProvider<HttpTransport>;
    constructor(opts: EthersProviderAdapterOpts);
    send(method: string, params: any[]): Promise<any>;
    connectToAccount(fn: (rpcClient: PublicErc4337Client) => BaseSmartContractAccount): AccountSigner;
    getAccountSigner(): AccountSigner;
    withPaymasterMiddleware: (overrides: {
        dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;
        paymasterDataMiddleware?: PaymasterAndDataMiddleware;
    }) => this;
    withGasEstimator: (override: GasEstimatorMiddleware) => this;
    withFeeDataGetter: (override: FeeDataMiddleware) => this;
    withCustomMiddleware: (override: AccountMiddlewareFn) => this;
    getPublicErc4337Client(): PublicErc4337Client;
    static fromEthersProvider(provider: JsonRpcProvider, entryPointAddress: Address): EthersProviderAdapter;
}
