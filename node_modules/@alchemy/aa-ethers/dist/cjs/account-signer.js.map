{"version":3,"file":"account-signer.js","sourceRoot":"","sources":["../../src/account-signer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseSmartContractAccount,\n  resolveProperties,\n  type AccountMiddlewareFn,\n  type FeeDataMiddleware,\n  type GasEstimatorMiddleware,\n  type PaymasterAndDataMiddleware,\n  type PublicErc4337Client,\n} from \"@alchemy/aa-core\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport type { Deferrable } from \"@ethersproject/properties\";\nimport {\n  type TransactionRequest,\n  type TransactionResponse,\n} from \"@ethersproject/providers\";\nimport { EthersProviderAdapter } from \"./provider-adapter.js\";\n\nconst hexlifyOptional = (value: any): `0x${string}` | undefined => {\n  if (value == null) {\n    return undefined;\n  }\n\n  return hexlify(value) as `0x${string}`;\n};\n\nexport class AccountSigner extends Signer {\n  private account?: BaseSmartContractAccount;\n\n  sendUserOperation;\n  waitForUserOperationTransaction;\n\n  constructor(readonly provider: EthersProviderAdapter) {\n    super();\n    this.account = this.provider.accountProvider.account;\n\n    this.sendUserOperation =\n      this.provider.accountProvider.sendUserOperation.bind(\n        this.provider.accountProvider\n      );\n    this.waitForUserOperationTransaction =\n      this.provider.accountProvider.waitForUserOperationTransaction.bind(\n        this.provider.accountProvider\n      );\n  }\n\n  getAddress(): Promise<string> {\n    if (!this.account) {\n      throw new Error(\n        \"connect the signer to a provider that has a connected account\"\n      );\n    }\n\n    return this.account.getAddress();\n  }\n\n  signMessage(message: string | Uint8Array): Promise<string> {\n    if (!this.account) {\n      throw new Error(\n        \"connect the signer to a provider that has a connected account\"\n      );\n    }\n\n    return this.account.signMessage(message);\n  }\n\n  withPaymasterMiddleware = (overrides: {\n    dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;\n    paymasterDataMiddleware?: PaymasterAndDataMiddleware;\n  }): this => {\n    this.provider.withPaymasterMiddleware(overrides);\n    return this;\n  };\n\n  withGasEstimator = (override: GasEstimatorMiddleware): this => {\n    this.provider.withGasEstimator(override);\n    return this;\n  };\n\n  withFeeDataGetter = (override: FeeDataMiddleware): this => {\n    this.provider.withFeeDataGetter(override);\n    return this;\n  };\n\n  withCustomMiddleware = (override: AccountMiddlewareFn): this => {\n    this.provider.withCustomMiddleware(override);\n    return this;\n  };\n\n  async sendTransaction(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<TransactionResponse> {\n    const resolved = await resolveProperties(transaction);\n    const txHash = await this.provider.accountProvider.sendTransaction({\n      // TODO: need to support gas fields as well\n      from: (await this.getAddress()) as `0x${string}`,\n      to: resolved.to as `0x${string}` | undefined,\n      data: hexlifyOptional(resolved.data),\n    });\n\n    return this.provider.getTransaction(txHash);\n  }\n\n  signTransaction(\n    _transaction: Deferrable<TransactionRequest>\n  ): Promise<string> {\n    throw new Error(\n      \"Transaction signing is not supported, use sendUserOperation instead\"\n    );\n  }\n\n  getPublicErc4337Client(): PublicErc4337Client {\n    return this.provider.getPublicErc4337Client();\n  }\n\n  connect(provider: EthersProviderAdapter): AccountSigner {\n    return new AccountSigner(provider);\n  }\n}\n"]}