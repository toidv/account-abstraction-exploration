"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthersProviderAdapter = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const properties_1 = require("@ethersproject/properties");
const providers_1 = require("@ethersproject/providers");
const account_signer_js_1 = require("./account-signer.js");
class EthersProviderAdapter extends providers_1.JsonRpcProvider {
    constructor(opts) {
        super();
        Object.defineProperty(this, "accountProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "withPaymasterMiddleware", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (overrides) => {
                this.accountProvider.withPaymasterMiddleware(overrides);
                return this;
            }
        });
        Object.defineProperty(this, "withGasEstimator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withGasEstimator(override);
                return this;
            }
        });
        Object.defineProperty(this, "withFeeDataGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withFeeDataGetter(override);
                return this;
            }
        });
        Object.defineProperty(this, "withCustomMiddleware", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (override) => {
                this.accountProvider.withCustomMiddleware(override);
                return this;
            }
        });
        if ("accountProvider" in opts) {
            this.accountProvider = opts.accountProvider;
        }
        else {
            const chain = (0, aa_core_1.getChain)(opts.chainId);
            this.accountProvider = new aa_core_1.SmartAccountProvider(opts.rpcProvider, opts.entryPointAddress, chain);
        }
    }
    send(method, params) {
        return this.accountProvider.request({ method, params });
    }
    connectToAccount(fn) {
        (0, properties_1.defineReadOnly)(this, "accountProvider", this.accountProvider.connect(fn));
        return this.getAccountSigner();
    }
    getAccountSigner() {
        return new account_signer_js_1.AccountSigner(this);
    }
    getPublicErc4337Client() {
        return this.accountProvider.rpcClient;
    }
    static fromEthersProvider(provider, entryPointAddress) {
        return new EthersProviderAdapter({
            rpcProvider: provider.connection.url,
            entryPointAddress,
            chainId: provider.network.chainId,
        });
    }
}
exports.EthersProviderAdapter = EthersProviderAdapter;
//# sourceMappingURL=provider-adapter.js.map