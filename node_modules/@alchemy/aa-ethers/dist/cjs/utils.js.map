{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAKO,MAAM,4BAA4B,GAAG,CAC1C,MAAc,EACM,EAAE;IACtB,OAAO;QACL,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,OAAwB,CAAC;QACxE,WAAW,EAAE,KAAK,EAAE,GAAwB,EAAE,EAAE,CAC9C,CAAC,MAAM,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAkB;QAClD,aAAa,EAAE,KAAK,EAClB,MAAmD,EACnD,EAAE;YACF,OAAO,CAAC,MAAM,MAAM,CAAC,cAAc,CACjC,MAAM,CAAC,MAAM,IAAI,EAAE,EAEnB,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,OAAO,CACf,CAAkB,CAAC;QACtB,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAlBW,QAAA,4BAA4B,gCAkBvC;AAEK,MAAM,kCAAkC,GAAG,CAChD,MAAc,EACM,EAAE;IACtB,OAAO;QACL,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC,UAAU,EAAsB;QAC/D,WAAW,EAAE,KAAK,EAAE,GAAwB,EAAE,EAAE,CAC9C,CAAC,MAAM,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAkB;QAClD,aAAa,EAAE,KAAK,EAClB,OAAoD,EACpD,EAAE;YACF,MAAM,IAAI,KAAK,CACb,+DAA+D,CAChE,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,kCAAkC,sCAe7C","sourcesContent":["import type { Address, SmartAccountSigner } from \"@alchemy/aa-core\";\nimport type { Signer } from \"@ethersproject/abstract-signer\";\nimport { Wallet } from \"@ethersproject/wallet\";\nimport type { SignTypedDataParameters } from \"viem/accounts\";\n\nexport const convertWalletToAccountSigner = (\n  wallet: Wallet\n): SmartAccountSigner => {\n  return {\n    getAddress: async () => Promise.resolve(wallet.address as `0x${string}`),\n    signMessage: async (msg: Uint8Array | string) =>\n      (await wallet.signMessage(msg)) as `0x${string}`,\n    signTypedData: async (\n      params: Omit<SignTypedDataParameters, \"privateKey\">\n    ) => {\n      return (await wallet._signTypedData(\n        params.domain ?? {},\n        // @ts-expect-error: these params should line up due to the spec for this function\n        params.types,\n        params.message\n      )) as `0x${string}`;\n    },\n  };\n};\n\nexport const convertEthersSignerToAccountSigner = (\n  signer: Signer\n): SmartAccountSigner => {\n  return {\n    getAddress: async () => signer.getAddress() as Promise<Address>,\n    signMessage: async (msg: Uint8Array | string) =>\n      (await signer.signMessage(msg)) as `0x${string}`,\n    signTypedData: async (\n      _params: Omit<SignTypedDataParameters, \"privateKey\">\n    ) => {\n      throw new Error(\n        \"signTypedData is not supported for ethers signers; use Wallet\"\n      );\n    },\n  };\n};\n"]}