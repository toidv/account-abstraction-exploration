{"version":3,"file":"provider-adapter.js","sourceRoot":"","sources":["../../src/provider-adapter.ts"],"names":[],"mappings":";;;AAAA,8CAW0B;AAC1B,0DAA2D;AAC3D,wDAA2D;AAC3D,2DAAoD;AAWpD,MAAa,qBAAsB,SAAQ,2BAAe;IAExD,YAAY,IAA+B;QACzC,KAAK,EAAE,CAAC;QAFD;;;;;WAAqD;QA+C9D;;;;mBAA0B,CAAC,SAG1B,EAAQ,EAAE;gBACT,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;gBACxD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAmB,CAAC,QAAgC,EAAQ,EAAE;gBAC5D,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAoB,CAAC,QAA2B,EAAQ,EAAE;gBACxD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBACjD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAuB,CAAC,QAA6B,EAAQ,EAAE;gBAC7D,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBACpD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAjEA,IAAI,iBAAiB,IAAI,IAAI,EAAE;YAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;SAC7C;aAAM;YACL,MAAM,KAAK,GAAG,IAAA,kBAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrC,IAAI,CAAC,eAAe,GAAG,IAAI,8BAAoB,CAC7C,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,iBAAiB,EACtB,KAAK,CACN,CAAC;SACH;IACH,CAAC;IAUD,IAAI,CAAC,MAAc,EAAE,MAAa;QAChC,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAC1D,CAAC;IAQD,gBAAgB,CACd,EAAgE;QAEhE,IAAA,2BAAc,EAAC,IAAI,EAAE,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACjC,CAAC;IAKD,gBAAgB;QACd,OAAO,IAAI,iCAAa,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAyBD,sBAAsB;QACpB,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;IACxC,CAAC;IAOD,MAAM,CAAC,kBAAkB,CACvB,QAAyB,EACzB,iBAA0B;QAE1B,OAAO,IAAI,qBAAqB,CAAC;YAC/B,WAAW,EAAE,QAAQ,CAAC,UAAU,CAAC,GAAG;YACpC,iBAAiB;YACjB,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,OAAO;SAClC,CAAC,CAAC;IACL,CAAC;CACF;AA1FD,sDA0FC","sourcesContent":["import {\n  BaseSmartContractAccount,\n  SmartAccountProvider,\n  getChain,\n  type AccountMiddlewareFn,\n  type Address,\n  type FeeDataMiddleware,\n  type GasEstimatorMiddleware,\n  type HttpTransport,\n  type PaymasterAndDataMiddleware,\n  type PublicErc4337Client,\n} from \"@alchemy/aa-core\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport { AccountSigner } from \"./account-signer.js\";\n\nexport type EthersProviderAdapterOpts =\n  | {\n      rpcProvider: string | PublicErc4337Client<HttpTransport>;\n      entryPointAddress: Address;\n      chainId: number;\n    }\n  | { accountProvider: SmartAccountProvider<HttpTransport> };\n\n/** Lightweight Adapter for SmartAccountProvider to enable Signer Creation */\nexport class EthersProviderAdapter extends JsonRpcProvider {\n  readonly accountProvider: SmartAccountProvider<HttpTransport>;\n  constructor(opts: EthersProviderAdapterOpts) {\n    super();\n    if (\"accountProvider\" in opts) {\n      this.accountProvider = opts.accountProvider;\n    } else {\n      const chain = getChain(opts.chainId);\n      this.accountProvider = new SmartAccountProvider(\n        opts.rpcProvider,\n        opts.entryPointAddress,\n        chain\n      );\n    }\n  }\n\n  /**\n   * Rewrites the send method to use the account provider's EIP-1193\n   * compliant request method\n   *\n   * @param method - the RPC method to call\n   * @param params - the params required by the RPC method\n   * @returns the result of the RPC call\n   */\n  send(method: string, params: any[]): Promise<any> {\n    return this.accountProvider.request({ method, params });\n  }\n\n  /**\n   * Connects the Provider to an Account and returns a Signer\n   *\n   * @param fn - a function that takes the account provider's rpcClient and returns a BaseSmartContractAccount\n   * @returns an {@link AccountSigner} that can be used to sign and send user operations\n   */\n  connectToAccount(\n    fn: (rpcClient: PublicErc4337Client) => BaseSmartContractAccount\n  ): AccountSigner {\n    defineReadOnly(this, \"accountProvider\", this.accountProvider.connect(fn));\n    return this.getAccountSigner();\n  }\n\n  /**\n   * @returns an {@link AccountSigner} using this as the underlying provider\n   */\n  getAccountSigner(): AccountSigner {\n    return new AccountSigner(this);\n  }\n\n  withPaymasterMiddleware = (overrides: {\n    dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;\n    paymasterDataMiddleware?: PaymasterAndDataMiddleware;\n  }): this => {\n    this.accountProvider.withPaymasterMiddleware(overrides);\n    return this;\n  };\n\n  withGasEstimator = (override: GasEstimatorMiddleware): this => {\n    this.accountProvider.withGasEstimator(override);\n    return this;\n  };\n\n  withFeeDataGetter = (override: FeeDataMiddleware): this => {\n    this.accountProvider.withFeeDataGetter(override);\n    return this;\n  };\n\n  withCustomMiddleware = (override: AccountMiddlewareFn): this => {\n    this.accountProvider.withCustomMiddleware(override);\n    return this;\n  };\n\n  getPublicErc4337Client(): PublicErc4337Client {\n    return this.accountProvider.rpcClient;\n  }\n\n  /**\n   * @param provider - the ethers JSON RPC provider to convert\n   * @param entryPointAddress - the entrypoint address that will be used for UserOperations\n   * @returns an instance of {@link EthersProviderAdapter}\n   */\n  static fromEthersProvider(\n    provider: JsonRpcProvider,\n    entryPointAddress: Address\n  ): EthersProviderAdapter {\n    return new EthersProviderAdapter({\n      rpcProvider: provider.connection.url,\n      entryPointAddress,\n      chainId: provider.network.chainId,\n    });\n  }\n}\n"]}